class TodoApi{static API="https://642597b39e0a30d92b368324.mockapi.io/api/todo/";static request(t="",o="GET",i){return fetch(TodoApi.API+t,{method:o,body:i?JSON.stringify(i):void 0,headers:{"Content-type":"application/json"}}).then(t=>{if(t.ok)return t.json()})}static getList(){return TodoApi.request().catch(()=>{throw new Error("Con not retrieve todo list from server.")})}static create(t){return TodoApi.request("","POST",t).catch(()=>{throw new Error("Con not create todo on server.")})}static update(t,o){return TodoApi.request(t,"PUT",o).catch(()=>{throw new Error("Con not update todo on server.")})}static delete(t){return TodoApi.request(t,"DELETE").catch(()=>{throw new Error("Con not delete todo on server.")})}}class Collection{static DEFAULT_TODO={done:!1};#todoList=[];fetch(){return TodoApi.getList().then(t=>{this.#todoList=t})}create(t){return TodoApi.create({...Collection.DEFAULT_TODO,...t}).then(t=>(this.addListItem(t),t))}update(t,o){return TodoApi.update(t,o).then(t=>(this.editListItem(o.id,t),t))}delete(t){return this.deleteListItem(t),TodoApi.delete(t),Promise.resolve()}getList(){return this.#todoList}deleteListItem(o){this.#todoList=this.#todoList.filter(t=>t.id!==o)}editListItem(o,i){this.#todoList=this.#todoList.map(t=>t.id===o?i:t)}addListItem(t){this.#todoList.push(t)}find(o){return this.#todoList.find(t=>t.id===o)}}class TodoFormView{constructor(t){this.$form=this.init(),this.$inputs=this.$form.find("input, textarea"),this.options=t}init(){return $(`
    <form id="todoForm">
    <input id="id" type="hidden" />
    <input id="title" type="text" placeholder="Введите сообщение"/>
    <button id="msgButton">Отправить</button>
    </form>
    `).on("submit",this.onFormSubmit.bind(this))}onFormSubmit(t){t.preventDefault();t=this.getFormData();this.isTodoValid(t)?this.options.onSubmit(t):this.showError(new Error("Поле сообщение не должно быть пустым"))}isTodoValid(t){return""!==t.title}appendTo(t){t.append(this.$form)}getFormData(){var t={};for(const o of this.$inputs)t[o.id]=o.value;return t}setFormData(t){for(const o of this.$inputs)o.value=t[o.id]}clearFormData(){for(const t of this.$inputs)t.value=""}showError(t){alert(t.message)}}class TodoListView{static DELETE_BTN=".deleteBtn";static EDIT_BTN=".editBtn";static SELECTOR_TODO_ITEM=".todoItem";constructor(t){this.$listEl=this.init(),this.options=t}init(){return $('<ul id="todoList"></ul>').on("click",TodoListView.DELETE_BTN,this.onDeleteBtnClick.bind(this)).on("click",TodoListView.EDIT_BTN,this.onEditBtnClick.bind(this)).on("click",TodoListView.SELECTOR_TODO_ITEM,this.onTodoElClick.bind(this))}onDeleteBtnClick(t){t.stopPropagation();t=this.getTodoElId(t.target);this.options.onDelete(t)}onEditBtnClick(t){t.stopPropagation();t=this.getTodoElId(t.target);this.options.onEdit(t)}onTodoElClick(t){t=this.getTodoElId(t.target);this.options.onToggle(t)}getTodoElId(t){return t.closest(TodoListView.SELECTOR_TODO_ITEM).dataset.id}appendTo(t){t.append(this.$listEl)}renderTodoList(t){t=t.map(this.generateTodoHtml).join("");this.$listEl.html(t)}replaceTodo(t,o){t=this.$listEl.find(`[data-id="${t}"]`),o=this.generateTodoHtml(o);t.replaceWith(o)}renderTodo(t){t=this.generateTodoHtml(t);this.$listEl.append(t)}generateTodoHtml(t){return`
      <li
        class="todoItem${t.done?" done":""}"
        data-id="${t.id}"
      >
        <span>${t.title}</span>
        <button class="editBtn">[Edit]</button>
        <button class="deleteBtn">[Delete]</button>
      </li>
    `}removeTodo(t){this.$listEl.find(`[data-id='${t}']`).remove()}}class Controller{constructor(t){this.todoCollection=new Collection,this.todoFormView=new TodoFormView({onSubmit:this.save.bind(this)}),this.todoListView=new TodoListView({onDelete:this.deleteTodoEl.bind(this),onEdit:t=>{t=this.todoCollection.find(t);this.todoFormView.setFormData(t)},onToggle:this.toggleDone.bind(this)}),this.todoFormView.appendTo(t),this.todoListView.appendTo(t),this.todoCollection.fetch().then(()=>{this.todoListView.renderTodoList(this.todoCollection.getList())})}save(o){o.id?this.todoCollection.update(o.id,o).then(t=>{this.todoListView.replaceTodo(o.id,t),this.todoFormView.clearFormData()}).catch(t=>showError(t)):this.todoCollection.create(o).then(t=>{this.todoListView.renderTodo(t),this.todoFormView.clearFormData()}).catch(t=>showError(t))}deleteTodoEl(t){this.todoCollection.delete(t).catch(t=>showError(t)),this.todoListView.removeTodo(t)}toggleDone(t){var o=this.todoCollection.find(t);o.done=!o.done,this.todoCollection.update(t,o).catch(t=>showError(t)),this.todoListView.replaceTodo(t,o)}}const $rootEl=$("#root");new Controller($rootEl);
//# sourceMappingURL=app.js.map
